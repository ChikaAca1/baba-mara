import { redirect, notFound } from 'next/navigation'
import { setRequestLocale } from 'next-intl/server'
import { getCurrentUser } from '@/lib/auth/actions'
import { createClient } from '@/lib/supabase/server'
import Link from 'next/link'
import SignOutButton from '@/components/SignOutButton'
import ReadingClientWrapper from './client-wrapper'

export default async function ReadingDetailPage({
  params,
}: {
  params: Promise<{ locale: string; id: string }>
}) {
  const { locale, id } = await params
  setRequestLocale(locale)

  const user = await getCurrentUser()

  if (!user) {
    redirect(`/${locale}/auth/signin`)
  }

  // Get reading details
  const supabase = await createClient()
  const { data: reading, error } = await supabase
    .from('readings')
    .select('*')
    .eq('id', id)
    .eq('user_id', user.id) // Ensure user owns this reading
    .single()

  if (error || !reading) {
    notFound()
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Navigation */}
      <nav className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <Link href={`/${locale}/dashboard`} className="text-2xl font-bold text-purple-600">
              🔮 Baba Mara
            </Link>
            <div className="flex items-center gap-4">
              <Link
                href={`/${locale}/dashboard/history`}
                className="text-sm text-gray-600 dark:text-gray-400 hover:text-purple-600 transition-colors"
              >
                ← Back to History
              </Link>
              <SignOutButton locale={locale} />
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Reading Header */}
        <div className="bg-white dark:bg-gray-800 rounded-xl p-8 shadow-md mb-6">
          <div className="flex items-start gap-4 mb-4">
            <span className="text-5xl">
              {reading.reading_type === 'coffee' ? '☕' : '🃏'}
            </span>
            <div className="flex-1">
              <h1 className="text-3xl font-bold capitalize mb-2">
                {reading.reading_type} Reading
              </h1>
              <div className="flex items-center gap-2 mb-3">
                <span
                  className={`px-3 py-1 rounded-full text-sm font-medium ${
                    reading.status === 'completed'
                      ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                      : reading.status === 'processing'
                      ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                      : reading.status === 'failed'
                      ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
                      : 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400'
                  }`}
                >
                  {reading.status}
                </span>
                {reading.was_free_trial && (
                  <span className="px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400">
                    Free Trial
                  </span>
                )}
              </div>
              <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                <span>📅 {new Date(reading.created_at).toLocaleDateString()}</span>
                <span>🕐 {new Date(reading.created_at).toLocaleTimeString()}</span>
                {reading.livekit_session_duration && (
                  <span>
                    🎙️ {Math.floor(reading.livekit_session_duration / 60)}m{' '}
                    {reading.livekit_session_duration % 60}s
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* Question */}
          <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 border border-purple-200 dark:border-purple-800">
            <h3 className="font-bold text-purple-900 dark:text-purple-300 mb-2">
              Your Question:
            </h3>
            <p className="text-gray-700 dark:text-gray-300">{reading.question}</p>
          </div>
        </div>

        {/* Client-side dynamic content */}
        <ReadingClientWrapper initialReading={reading} locale={locale} />

        {/* Disclaimer */}
        <div className="mt-8 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4">
          <p className="text-sm text-purple-900 dark:text-purple-300 text-center">
            ℹ️ These readings are generated by an AI-based digital advisor and are intended
            solely for entertainment and introspective purposes. They are not professional
            advice.
          </p>
        </div>
      </div>
    </div>
  )
}
